{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0044) - AWS Landing Zone Initiation Template",
    "Parameters": {
        "SharedServicesAccountEmail": {
            "Description": "Email address used to create a centralized Shared Services account",
            "Type": "String",
            "MinLength": 6,
            "MaxLength": 64,
            "AllowedPattern": "^[_A-Za-z0-9-\\+\\.]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$",
            "ConstraintDescription": "Account Email can contain only ASCII characters. This must be in the format of something@email.com"
        },
        "LoggingAccountEmail": {
            "Description": "Email address used create a centralized audit log account",
            "Type": "String",
            "MinLength": 6,
            "MaxLength": 64,
            "AllowedPattern": "^[_A-Za-z0-9-\\+\\.]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$",
            "ConstraintDescription": "Account Email can contain only ASCII characters. This must be in the format of something@email.com"
        },
        "SecurityAccountEmail": {
            "Description": "Email address used create a centralized security account",
            "Type": "String",
            "MinLength": 6,
            "MaxLength": 64,
            "AllowedPattern": "^[_A-Za-z0-9-\\+\\.]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$",
            "ConstraintDescription": "Account Email can contain only ASCII characters. This must be in the format of something@email.com"
        },
        "SecurityAlertEmail": {
            "Description": "Email for all the Security Alerts related to Landing Zone",
            "Type": "String",
            "MinLength": 6,
            "MaxLength": 64,
            "AllowedPattern": "^[_A-Za-z0-9-\\+\\.]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$",
            "ConstraintDescription": "Security Alert Email can contain only ASCII characters. This must be in the format of something@email.com"
        },
        "SubscribeAllChangeEventsEmailToTopic": {
            "Type": "String",
            "Default": "No",
            "Description": "Indicates whether AllConfigurationEmail will be subscribed to the AllConfigurationTopicName topic.",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "AllChangeEventsEmail": {
            "Description": "Email for all the alerts related to Landing Zone",
            "Type": "String",
            "Default": "",
            "MinLength": 0,
            "MaxLength": 64
        },
        "CoreOUName": {
            "Description": "Name of Organizations Unit for the Core Accounts",
            "Type": "String",
            "Default": "core",
            "MinLength": 1,
            "MaxLength": 128
        },
        "NonCoreOUNames": {
            "Description": "Comma separated list of additional Organizations Unit names for organizing additional AWS accounts by applications, business units, etc.",
            "Default": "applications",
            "Type": "CommaDelimitedList"
        },
        "PipelineApprovalStage": {
            "Description": "Do you want to add a manual approval stage to the AWS Landing Zone Configuration Pipeline?",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "No",
            "Type": "String"
        },
        "PipelineApprovalEmail": {
            "Description": "(Not required if Pipeline Approval Stage = 'No') Email for notifying that the Landing Zone pipeline is waiting for an Approval",
            "Type": "String"
        },
        "BuildLandingZone": {
            "Description": "Do you want to trigger the pipeline right away to build the Landing Zone?",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Type": "String"
        },
        "LockStackSetsExecutionRole": {
            "Description": "Do you want to lock down the AWS StackSetsExecution role in the member accounts?",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Type": "String"
        },
        "ADRegion": {
            "Description": "Region for Shared Services VPC & AD to be deployed into e.g. us-west-2",
            "Type": "String",
            "AllowedValues": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ap-south-1",
                "ap-southeast-1",
                "ap-southeast-2",
                "ap-northeast-1",
                "ca-central-1",
                "eu-central-1",
                "eu-west-1",
                "eu-west-2",
                "sa-east-1"
            ]
        },
       "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
            "Default": "example.com",
            "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "MaxLength": 25,
            "MinLength": 3,
            "Type": "String"
        },
        "DomainNetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "Default": "example",
            "Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE",
            "MaxLength": 15,
            "MinLength": 1,
            "Type": "String"
        },
        "VPCOptions": {
            "Type": "String",
            "Default": "Shared-Services-Network-3-AZs",
            "Description": "Create a shared service VPC with subnets in 2 or 3 AZs. The 3 AZ option is recommended for all regions except when the desired AD Region only has 2 AZs.",
            "AllowedValues": [
                "Shared-Services-Network-2-AZs",
                "Shared-Services-Network-3-AZs"
            ]
        },
        "VPCCidr": {
            "Type": "String",
            "Default": "100.64.0.0/16",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for the Shared Services VPC"
        },
        "RDGWInstanceType": {
            "Description": "Amazon EC2 instance type for the Remote Desktop Gateway instances",
            "Type": "String",
            "Default": "t2.large",
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
               "m5.4xlarge"
            ]
        },
        "RDGWCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "Description": "Allowed CIDR Block for external access to the Remote Desktop Gateways",
            "Type": "String"
        },
        "NumberOfRDGWHosts": {
            "AllowedValues": [
                "1",
                "2",
                "3",
                "4"
            ],
            "Default": "1",
            "Description": "Enter the number of Remote Desktop Gateway hosts to create",
            "Type": "String"
        },
        "ADConnectorRegion": {
            "AllowedValues": [
                "us-east-1"
            ],
            "Description": "List of AWS SSO supported endpoint regions.",
            "Default": "us-east-1",
            "Type": "String"
        },
        "ADConnectorVPCCIDR": {
            "Type": "String",
            "Default": "10.249.0.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for AD Connector to use for connecting AWS SSO to Active Directory"
        },
        "ADConnectorPrivateSubnet1CIDR": {
            "Type": "String",
            "Default": "10.249.0.0/27",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for AD Connector VPC subnet created in AZ1"
        },
        "ADConnectorPrivateSubnet2CIDR": {
            "Type": "String",
            "Default": "10.249.0.32/27",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for AD Connector VPC subnet created in AZ2"
        },
        "EnableEncryptedVolumesRule": {
            "Type": "String",
            "Description": "Enables the AWS managed encrypted-volumes config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableRdsEncryptionRule": {
            "Type": "String",
            "Description": "Enables the AWS managed rds-storage-encrypted config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableS3PublicReadRule": {
            "Type": "String",
            "Description": "Enables the AWS managed s3-bucket-public-read-prohibited config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableS3PublicWriteRule": {
            "Type": "String",
            "Description": "Enables the AWS managed s3-bucket-public-write-prohibited config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableS3ServerSideEncryptionRule": {
            "Type": "String",
            "Description": "Enables the AWS managed s3-bucket-server-side-encryption-enabled config rule.",
            "Default": "No",
           "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableRootMfaRule": {
            "Type": "String",
            "Description": "Enables the AWS managed root-account-mfa-enabled config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableIamPasswordPolicyRule": {
            "Type": "String",
            "Description": "Enables the AWS managed iam-password-policy config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableRestrictedCommonPortsRule": {
            "Type": "String",
            "Description": "Enables the AWS managed restricted-common-ports config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "EnableRestrictedSshRule": {
            "Type": "String",
            "Description": "Enables the AWS managed restricted-ssh config rule.",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
           ]
        },
        "LogsRetentionInDays": {
            "Description": "Specifies the number of days you want to retain VPC flow logs in each account.",
            "Type": "Number",
            "Default": 90,
            "AllowedValues": [
                1,
                3,
                5,
                7,
                14,
                30,
                60,
                90,
                120,
                150,
                180,
                365,
                400,
                545,
                731,
                1827,
                3653
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Landing Zone Core Account Configuration"
                    },
                    "Parameters": [
                        "SharedServicesAccountEmail",
                        "LoggingAccountEmail",
                        "SecurityAccountEmail",
                        "CoreOUName",
                        "NonCoreOUNames",
                        "SecurityAlertEmail",
                        "LockStackSetsExecutionRole",
                        "SubscribeAllChangeEventsEmailToTopic",
                        "AllChangeEventsEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Landing Zone Pipeline Configuration"
                    },
                    "Parameters": [
                        "PipelineApprovalStage",
                        "PipelineApprovalEmail",
                        "BuildLandingZone"
                    ]
                },
                {
                    "Label": {
                        "default": "Shared Services VPC & Active Directory Configuration"
                    },
                    "Parameters": [
                        "ADRegion",
                        "VPCOptions",
                        "VPCCidr",
                        "DomainDNSName",
                        "DomainNetBIOSName",
                        "RDGWInstanceType",
                        "RDGWCIDR",
                        "NumberOfRDGWHosts"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS SSO Network Configuration"
                    },
                    "Parameters": [
                        "ADConnectorRegion",
                        "ADConnectorVPCCIDR",
                        "ADConnectorPrivateSubnet1CIDR",
                        "ADConnectorPrivateSubnet2CIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "VPC Flow Logs Retention Policy"
                    },
                    "Parameters": [
                        "LogsRetentionInDays"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Config Rules"
                    },
                    "Parameters": [
                        "EnableEncryptedVolumesRule",
                        "EnableRdsEncryptionRule",
                        "EnableS3PublicReadRule",
                        "EnableS3PublicWriteRule",
                        "EnableS3ServerSideEncryptionRule",
                        "EnableRootMfaRule",
                        "EnableIamPasswordPolicyRule",
                        "EnableRestrictedCommonPortsRule",
                        "EnableRestrictedSshRule"
                    ]
                }
            ],
            "ParameterLabels": {
                "SharedServicesAccountEmail": {
                    "default": "Shared Services Account Email Address"
                },
                "LoggingAccountEmail": {
                    "default": "Logging Account Email Address"
                },
                "SecurityAccountEmail": {
                    "default": "Security Account Email Address"
                },
                "CoreOUName": {
                    "default": "Core OU Name"
                },
                "NonCoreOUNames": {
                    "default": "Non Core OU Names"
                },
                "SecurityAlertEmail": {
                    "default": "Security Alert Email Address"
                },
                "LockStackSetsExecutionRole": {
                    "default": "Lock StackSetsExecution Role"
                },
                "AllChangeEventsEmail": {
                    "default": "All Change Events Email"
                },
                "SubscribeAllChangeEventsEmailToTopic": {
                    "default": "Subscribe All Change Events Email to Topic"
                },
                "PipelineApprovalStage": {
                    "default": "Pipeline Approval Stage"
                },
                "PipelineApprovalEmail": {
                    "default": "Pipeline Approval Email Address"
                },
                "BuildLandingZone": {
                    "default": "Auto Build Landing Zone"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "DomainNetBIOSName": {
                    "default": "Domain Net BIOS Name"
                },
                "VPCOptions": {
                    "default": "Shared Services VPC Options"
                },
                "VPCCidr": {
                    "default": "Shared Services VPC CIDR"
                },
                "ADRegion": {
                    "default": "AD Region"
                },
                "RDGWInstanceType": {
                    "default": "RDGW Instance Type"
                },
                "RDGWCIDR": {
                    "default": "Allowed Remote Desktop External Access CIDR"
                },
                "NumberOfRDGWHosts": {
                    "default": "Number of RDGW Hosts"
                },
                "ADConnectorRegion": {
                    "default": "AWS SSO region Endpoint"
                },
                "ADConnectorVPCCIDR": {
                    "default": "AD Connector VPC CIDR"
                },
                "ADConnectorPrivateSubnet1CIDR": {
                    "default": "AD Connector VPC Subnet 1"
                },
                "ADConnectorPrivateSubnet2CIDR": {
                    "default": "AD Connector VPC Subnet 2"
                },
                "EnableEncryptedVolumesRule": {
                    "default": "Enable Encrypted Volumes Rule"
                },
                "EnableRdsEncryptionRule": {
                    "default": "Enable RDS Encryption Rule"
                },
                "EnableS3PublicReadRule": {
                    "default": "Enable S3 Public Read Rule"
                },
                "EnableS3PublicWriteRule": {
                    "default": "Enable S3 Public Write Rule"
                },
                "EnableS3ServerSideEncryptionRule": {
                    "default": "Enable S3 SSE Policy Rule"
                },
                "EnableRootMfaRule": {
                    "default": "Enable Root MFA Rule"
                },
                "EnableIamPasswordPolicyRule": {
                    "default": "Enable IAM Password Policy Rule"
                },
                "EnableRestrictedCommonPortsRule": {
                    "default": "Enable Restricted Common Ports Rule"
                },
                "EnableRestrictedSshRule": {
                    "default": "Enable Restricted SSH Rule"
                },
                "LogsRetentionInDays": {
                    "default": "VPC Flow Logs Retention In Days"
                }
            }
        }
    },
    "Mappings": {
        "SSMParameterNames": {
            "LandingZoneSCProductConstraintRoleParameterName": {
                "Name": "/org/primary/service_catalog/constraint/role_arn"
            },
            "LandingZoneSCPortfolioPrincipalRoleParameterName": {
                "Name": "/org/primary/service_catalog/principal/role_arn"
            },
            "LandingZoneSecurityAlertEmailParameterName": {
                "Name": "/org/primary/security_alert_email_id"
            },
            "LandingZoneAllAlertEmailParameterName": {
                "Name": "/org/primary/all_alerts_email_id"
            },
            "LandingZoneLambdaParameterName": {
                "Name": "/org/primary/avm_lambda_arn"
            }
        },
        "BucketConfiguration": {
            "SourceBucketName": {
                "Name": "solutions-reference"
            },
            "SourceKeyName": {
                "Name": "aws-landing-zone/v1.0.2/aws-landing-zone-configuration.zip"
            },
            "LandingZonePipelineS3TriggerKey": {
                "Name": "aws-landing-zone-configuration.zip"
            },
            "LandingZonePipelineS3NonTriggerKey": {
                "Name": "_aws-landing-zone-configuration.zip"
            }
        },
        "KMS": {
            "Alias": {
                "Name": "AwsLandingZoneKMSKey"
            }
        },
        "VPC": {
            "Shared-Services-Network-2-AZs": {
                "AvailabilityZones": 2,
                "PublicSubnets": [
                    "PublicSubnet1CIDR",
                    "PublicSubnet2CIDR"
                ],
                "PrivateSubnets": [
                    "PrivateSubnet1ACIDR",
                    "PrivateSubnet2ACIDR"
                ],
                "CreateAdditionalPrivateSubnets": "false",
                "CreatePrivateSubnets": "true",
                "CreatePublicSubnets": "true",
                "TransitVPC": "false"
            },
            "Shared-Services-Network-3-AZs": {
                "AvailabilityZones": 3,
                "PublicSubnets": [
                    "PublicSubnet1CIDR",
                    "PublicSubnet2CIDR",
                    "PublicSubnet3CIDR"
                ],
                "PrivateSubnets": [
                    "PrivateSubnet1ACIDR",
                    "PrivateSubnet2ACIDR",
                    "PrivateSubnet3ACIDR"
                ],
                "CreateAdditionalPrivateSubnets": "false",
                "CreatePrivateSubnets": "true",
                "CreatePublicSubnets": "true",
                "TransitVPC": "false"
            }
        },
        "Solution": {
            "Metrics": {
                "SendAnonymousData": "Yes"
            }
        },
        "LambdaFunction": {
            "Logging": {
                "Level": "info"
            }
        }
    },
    "Conditions": {
        "IsPipelineApprovalStageCondition": {
            "Fn::Equals": [
                {
                    "Ref": "PipelineApprovalStage"
                },
                "Yes"
            ]
        },
        "IsBuildLandingZoneCondition": {
            "Fn::Equals": [
                {
                    "Ref": "BuildLandingZone"
                },
                "Yes"
            ]
        },
        "IsSubscribeToTopicCondition": {
            "Fn::Equals": [
                {
                    "Ref": "SubscribeAllChangeEventsEmailToTopic"
                },
                "Yes"
            ]
        }
    },
    "Resources": {
        "LandingZoneSCPortfolioPrincipalRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess"
                ]
            }
        },
        "LandingZoneSCProductConstraintRole": {
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F3",
                            "reason": "Override the IAM role to allow catalog-user:* resource on its permissions policy."
                        }
                    ]
                }
            },
            "Properties": {
                "RoleName": "LandingZoneSCProductConstraintRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "servicecatalog.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LZAVMProductPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                           "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "${LandingZoneLambda.Arn}"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "catalog-user:*",
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStackEvents",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:GetTemplateSummary",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "cloudformation:UpdateStack",
                                        "s3:GetObject"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "states:DescribeStateMachine",
                                        "states:DescribeStateMachineForExecution",
                                        "states:DescribeExecution",
                                        "states:ListExecutions",
                                        "states:StartExecution",
                                        "states:StopExecution"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "${OrganizationsStateMachine}"
                                        },
                                        {
                                            "Fn::Sub": "${ServiceControlPolicyMachine}"
                                        },
                                        {
                                            "Fn::Sub": "${StackSetStateMachine}"
                                        },
                                        {
                                            "Fn::Sub": "${ServiceCatalogStateMachine}"
                                        },
                                       {
                                            "Fn::Sub": "${LaunchAVMStateMachine}"
                                        },
                                        {
                                            "Fn::Sub": "${CheckAVMExistsStateMachine}"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AWSCloudFormationStackSetAdministrationRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "AWSCloudFormationStackSetAdministrationRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "cloudformation.amazonaws.com"
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AssumeRole-AWSCloudFormationStackSetExecutionRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AWSCloudFormationStackSetExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "AWSCloudFormationStackSetExecutionRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Sub": "${AWSCloudFormationStackSetAdministrationRole.Arn}"
                                    },
                                    {
                                        "Fn::Sub": "${StateMachineLambdaRole.Arn}"
                                    },
                                    {
                                        "Fn::Sub": "${LandingZoneLambdaRole.Arn}"
                                    }
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess"
                ]
            }
        },
        "LandingZoneSCPortfolioPrincipalRoleParameter": {
            "DependsOn": [
                "LandingZoneSCPortfolioPrincipalRole"
            ],
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::FindInMap": [
                        "SSMParameterNames",
                        "LandingZoneSCPortfolioPrincipalRoleParameterName",
                        "Name"
                    ]
                },
                "Description": "Contains the IAM Role Arn for Landing Zone Service Catalog Principal",
                "Type": "StringList",
                "Value": {
                    "Fn::Sub": "${StateMachineLambdaRole.Arn}"
                }
            }
        },
        "LandingZoneSCProductConstraintRoleParameter": {
            "DependsOn": [
                "LandingZoneSCProductConstraintRole"
            ],
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::FindInMap": [
                        "SSMParameterNames",
                        "LandingZoneSCProductConstraintRoleParameterName",
                        "Name"
                    ]
                },
                "Description": "Contains the IAM Role Arn for Landing Zone Launch Constraint",
                "Type": "String",
                "Value": {
                    "Fn::Sub": "${LandingZoneSCProductConstraintRole.Arn}"
                }
            }
        },
        "SecurityAlertEmailParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::FindInMap": [
                        "SSMParameterNames",
                        "LandingZoneSecurityAlertEmailParameterName",
                        "Name"
                    ]
                },
                "Description": "Contains the Landing Zone Security Alert Email ID",
                "Type": "String",
                "Value": {
                    "Ref": "SecurityAlertEmail"
                }
            }
        },
       "AllAlertEmailParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::FindInMap": [
                        "SSMParameterNames",
                        "LandingZoneAllAlertEmailParameterName",
                        "Name"
                    ]
                },
                "Description": "Contains the Landing Zone Change Alert Email ID",
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "IsSubscribeToTopicCondition",
                        {
                            "Ref": "AllChangeEventsEmail"
                        },
                        "no-notifications@email.com"
                    ]
                }
            }
        },
        "PipelineApprovalTopic": {
            "Type": "AWS::SNS::Topic",
            "Condition": "IsPipelineApprovalStageCondition",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "PipelineApprovalEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "LandingZonePipelineS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "aws-landing-zone-configuration-${AWS::AccountId}-${AWS::Region}"
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            }
        },
        "LandingZonePipelineArtifactS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
           }
        },
        "LandingZoneCodePipelineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "LandingZoneCodePipelineRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codepipeline.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWS-Landing-Zone-CodePipeline-Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketVersioning"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineArtifactS3Bucket}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineS3Bucket}"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineArtifactS3Bucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineS3Bucket}/*"
                                        }
                                    ]
                                },
                               {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${LandingZoneCodeBuild}"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:UploadArchive",
                                        "codecommit:GetUploadArchiveStatus",
                                        "codecommit:CancelUploadArchive"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "StateMachineTriggerLambda",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:ListFunctions",
                                        "lambda:ListVersionsByFunction"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Fn::If": [
                                        "IsPipelineApprovalStageCondition",
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "sns:Publish"
                                            ],
                                            "Resource": {
                                                "Ref": "PipelineApprovalTopic"
                                            }
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LandingZoneCodePipeline": {
            "Type": "AWS::CodePipeline::Pipeline",
            "Properties": {
                "Name": "AWS-Landing-Zone-CodePipeline",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "LandingZoneCodePipelineRole",
                        "Arn"
                    ]
                },
                "ArtifactStore": {
                    "Location": {
                        "Ref": "LandingZonePipelineArtifactS3Bucket"
                    },
                    "Type": "S3"
                },
                "Stages": [
                    {
                        "Name": "Source",
                        "Actions": [
                            {
                                "Name": "Source",
                                "ActionTypeId": {
                                    "Category": "Source",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "S3"
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "SourceApp"
                                    }
                                ],
                                "Configuration": {
                                    "S3Bucket": {
                                        "Ref": "LandingZonePipelineS3Bucket"
                                    },
                                    "S3ObjectKey": {
                                        "Fn::FindInMap": [
                                            "BucketConfiguration",
                                            "LandingZonePipelineS3TriggerKey",
                                            "Name"
                                        ]
                                    }
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "Build",
                        "Actions": [
                            {
                                "Name": "CodeBuild",
                                "InputArtifacts": [
                                    {
                                        "Name": "SourceApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Build",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "CodeBuild"
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "Configuration": {
                                    "ProjectName": {
                                        "Ref": "LandingZoneCodeBuild"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "IsPipelineApprovalStageCondition",
                            {
                                "Name": "Approval",
                                "Actions": [
                                    {
                                        "Name": "Approval",
                                        "ActionTypeId": {
                                            "Category": "Approval",
                                            "Owner": "AWS",
                                            "Version": 1,
                                            "Provider": "Manual"
                                        },
                                        "RunOrder": 1,
                                        "Configuration": {
                                            "NotificationArn": {
                                                "Ref": "PipelineApprovalTopic"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Name": "CoreAccounts",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"core_accounts\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"sequential\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "ServiceControlPolicy",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"service_control_policy\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"parallel\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "CoreResource",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"core_resources\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"sequential\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "ServiceCatalog",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"service_catalog\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"parallel\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "BaselineResource",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"baseline_resources\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"sequential\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "LaunchAVM",
                        "Actions": [
                            {
                                "Name": "Deploy",
                                "InputArtifacts": [
                                    {
                                        "Name": "BuiltApp"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": 1,
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "StateMachineTriggerLambda"
                                    },
                                    "UserParameters": "{\"pipeline_stage\": \"launch_avm\", \"artifact\" : \"BuiltApp\", \"exec_mode\" : \"sequential\"}"
                                },
                                "RunOrder": 1
                            }
                        ]
                    }
                ]
            }
        },
        "LandingZoneCodeBuildRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codebuild.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWS-Landing-Zone-CodeBuild-Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineArtifactS3Bucket}/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:ValidateTemplate"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LandingZoneCodeBuild": {
            "Type": "AWS::CodeBuild::Project",
            "Properties": {
                "Name": "AWS-Landing-Zone-CodeBuild",
                "ServiceRole": {
                    "Fn::GetAtt": [
                        "LandingZoneCodeBuildRole",
                        "Arn"
                    ]
                },
                "Source": {
                    "Type": "CODEPIPELINE",
                    "BuildSpec": "version: 0.2\n\nphases:\n  install:\n    commands:\n      - export current=`pwd`\n      - if [ ! -f manifest.yaml ] ; then echo 'manifest.yaml does not exist at the root level of aws-landing-zone-configuration.zip, please check the ZIP file'; exit 1 ; fi\n      - yum install yum-utils epel-release -y\n      - yum-config-manager --enable epel\n      - yum update -y\n      - yum install zip wget git libpng-devel libcurl-devel gcc python-devel libjpeg-devel -y\n      - pip install --upgrade pip==9.0.3\n      - pip install --upgrade setuptools\n      - pip install --upgrade virtualenv\n      - pip install --upgrade yorm\n      - pip install --upgrade pykwalify\n      - yum install ruby22-devel jq -y\n      - gem install cfn-nag\n  pre_build:\n    commands:\n      - echo 'Executing validation tests'\n      - echo 'bash validation/run-validation.sh $ARTIFACT_BUCKET'\n      - bash validation/run-validation.sh $ARTIFACT_BUCKET\n      - echo 'Installing validation tests completed `date`'\n  build:\n    commands:\n      - echo 'Starting build `date` in `pwd`'\n      - echo 'Source Dist completed `date`'\n  post_build:\n    commands:\n      - echo 'Starting post build `date` in `pwd`'\n      - echo 'build completed on `date`'\n\nartifacts:\n  files:\n      - '**/*'\n"
                },
                "Environment": {
                   "ComputeType": "BUILD_GENERAL1_SMALL",
                    "Image": "aws/codebuild/eb-python-3.4-amazonlinux-64:2.1.6",
                    "Type": "LINUX_CONTAINER",
                    "EnvironmentVariables": [
                        {
                            "Name": "ARTIFACT_BUCKET",
                            "Value": {
                                "Ref": "LandingZonePipelineArtifactS3Bucket"
                            }
                        }
                    ]
                },
                "Artifacts": {
                    "Name": {
                        "Fn::Sub": "${LandingZonePipelineArtifactS3Bucket}-Built"
                    },
                    "Type": "CODEPIPELINE"
                }
            }
        },
        "LandingZoneDeploymentLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "LandingZoneDeploymentLambdaRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LandingZoneDeploymentLambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/lambda/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetEncryptionConfiguration",
                                        "s3:PutEncryptionConfiguration"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:CreateKey",
                                        "kms:CreateAlias",
                                        "kms:ListAliases",
                                        "kms:DescribeKey",
                                        "kms:TagResource",
                                        "kms:PutKeyPolicy"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:GetParameter",
                                        "ssm:DeleteParameter",
                                        "ssm:GetParametersByPath",
                                        "ssm:DescribeParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::solutions-reference/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LandingZonePipelineS3Bucket}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LandingZoneDeploymentLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "log_level": {
                            "Fn::FindInMap": [
                                "LambdaFunction",
                                "Logging",
                                "Level"
                            ]
                        },
                        "kms_key_alias_name": {
                            "Fn::FindInMap": [
                                "KMS",
                                "Alias",
                                "Name"
                            ]
                        }
                    }
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": "aws-landing-zone/v1.0.2/aws-landing-zone-config-deployer.zip"
                },
                "FunctionName": "LandingZoneDeploymentLambda",
                "Description": "AWS Landing Zone State Machine Trigger",
                "Handler": "config_deployer.lambda_handler",
                "MemorySize": "512",
                "Role": {
                    "Fn::GetAtt": [
                        "LandingZoneDeploymentLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LandingZoneConfigDeployer": {
            "Type": "Custom::ConfigDeployer",
            "Properties": {
                "metrics_flag": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Metrics",
                        "SendAnonymousData"
                    ]
                },
                "email_list": [
                    {
                        "Ref": "SharedServicesAccountEmail"
                    },
                    {
                        "Ref": "LoggingAccountEmail"
                    },
                    {
                        "Ref": "SecurityAccountEmail"
                    },
                    {
                        "Ref": "SecurityAlertEmail"
                    }
                ],
                "bucket_config": {
                    "destination_bucket_name": {
                        "Ref": "LandingZonePipelineS3Bucket"
                    },
                    "destination_s3_key": {
                        "Fn::If": [
                            "IsBuildLandingZoneCondition",
                            {
                                "Fn::FindInMap": [
                                    "BucketConfiguration",
                                    "LandingZonePipelineS3TriggerKey",
                                    "Name"
                                ]
                            },
                            {
                                "Fn::FindInMap": [
                                    "BucketConfiguration",
                                    "LandingZonePipelineS3NonTriggerKey",
                                    "Name"
                                ]
                            }
                        ]
                    },
                    "source_bucket_name": {
                        "Fn::FindInMap": [
                            "BucketConfiguration",
                            "SourceBucketName",
                            "Name"
                        ]
                    },
                    "source_s3_key": {
                        "Fn::FindInMap": [
                            "BucketConfiguration",
                            "SourceKeyName",
                            "Name"
                        ]
                    }
                },
                "kms_config": {
                    "kms_key_alias": {
                        "Fn::Join": [
                            "/",
                            [
                                "alias",
                                {
                                    "Fn::FindInMap": [
                                        "KMS",
                                        "Alias",
                                        "Name"
                                    ]
                                }
                            ]
                        ]
                    },
                    "kms_key_policy": {
                        "Version": "2012-10-17",
                        "Id": "key-alz-1",
                        "Statement": [
                            {
                                "Sid": "Allow administration of the key",
                                "Effect": "Allow",
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                },
                                "Action": [
                                    "kms:Create*",
                                    "kms:Describe*",
                                    "kms:Enable*",
                                    "kms:List*",
                                    "kms:Put*",
                                    "kms:Update*",
                                    "kms:Revoke*",
                                    "kms:Disable*",
                                    "kms:Get*",
                                    "kms:Delete*",
                                    "kms:ScheduleKeyDeletion",
                                    "kms:CancelKeyDeletion"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Sid": "Allow use of the key",
                                "Effect": "Allow",
                                "Principal": {
                                    "AWS": [
                                        {
                                            "Fn::Sub": "${LandingZoneLambdaRole.Arn}"
                                        },
                                        {
                                            "Fn::Sub": "${StateMachineLambdaRole.Arn}"
                                        },
                                        {
                                            "Fn::Sub": "${LandingZoneDeploymentLambdaRole.Arn}"
                                        },
                                        {
                                            "Fn::Sub": "${StateMachineTriggerLambdaRole.Arn}"
                                        },
                                        {
                                            "Fn::Sub": "${LandingZoneCodePipelineRole.Arn}"
                                        }
                                    ]
                                },
                                "Action": [
                                    "kms:Encrypt",
                                    "kms:Decrypt",
                                    "kms:ReEncrypt*",
                                    "kms:GenerateDataKey*",
                                    "kms:DescribeKey"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                },
                "find_replace": [
                    {
                        "file_name": "manifest.yaml.j2",
                        "parameters": {
                            "region": {
                                "Fn::Sub": "${AWS::Region}"
                            },
                            "core_ou": {
                                "Ref": "CoreOUName"
                            },
                            "ou_list": {
                                "Ref": "NonCoreOUNames"
                            },
                            "security_email": {
                                "Ref": "SecurityAccountEmail"
                            },
                            "logging_email": {
                                "Ref": "LoggingAccountEmail"
                            },
                            "shared_services_email": {
                                "Ref": "SharedServicesAccountEmail"
                            },
                            "security_alert_email": {
                                "Ref": "SecurityAlertEmail"
                            },
                            "ad_region": {
                                "Ref": "ADRegion"
                            },
                            "ad_connector_region": {
                                "Ref": "ADConnectorRegion"
                            },
                            "lock_down_stack_sets_role": {
                                "Ref": "LockStackSetsExecutionRole"
                            }
                        }
                    },
                    {
                        "file_name": "parameters/core_accounts/aws-landing-zone-aws-active-directory.json.j2",
                        "parameters": {
                            "domain_dns_name": {
                                "Ref": "DomainDNSName"
                            },
                            "domain_net_bios_name": {
                                "Ref": "DomainNetBIOSName"
                            }
                        }
                    },
                    {
                        "file_name": "parameters/core_accounts/aws-landing-zone-shared-services-vpc.json.j2",
                        "parameters": {
                            "number_of_az": {
                                "Fn::FindInMap": [
                                    "VPC",
                                    {
                                        "Ref": "VPCOptions"
                                    },
                                    "AvailabilityZones"
                                ]
                            },
                            "additional_private_subnets": {
                                "Fn::FindInMap": [
                                    "VPC",
                                    {
                                        "Ref": "VPCOptions"
                                    },
                                    "CreateAdditionalPrivateSubnets"
                                ]
                            },
                            "create_private_subnets": {
                                "Fn::FindInMap": [
                                    "VPC",
                                    {
                                        "Ref": "VPCOptions"
                                    },
                                    "CreatePrivateSubnets"
                                ]
                            },
                            "create_public_subnets": {
                                "Fn::FindInMap": [
                                    "VPC",
                                    {
                                        "Ref": "VPCOptions"
                                    },
                                    "CreatePublicSubnets"
                                ]
                            },
                            "private_subnet1a_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet1ACIDR"
                                ]
                            },
                            "private_subnet1b_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet1BCIDR"
                                ]
                            },
                            "private_subnet2a_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet2ACIDR"
                                ]
                            },
                            "private_subnet2b_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet2BCIDR"
                                ]
                            },
                            "private_subnet3a_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet3ACIDR"
                                ]
                            },
                            "private_subnet3b_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet3BCIDR"
                                ]
                            },
                            "private_subnet4a_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet4ACIDR"
                                ]
                            },
                            "private_subnet4b_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PrivateSubnet4BCIDR"
                                ]
                            },
                            "public_subnet1_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PublicSubnet1CIDR"
                                ]
                            },
                            "public_subnet2_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PublicSubnet2CIDR"
                                ]
                            },
                            "public_subnet3_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PublicSubnet3CIDR"
                                ]
                            },
                            "public_subnet4_cidr": {
                                "Fn::GetAtt": [
                                    "VPCCalculator",
                                    "PublicSubnet4CIDR"
                                ]
                            },
                            "logs_retention_in_days": {
                                "Ref": "LogsRetentionInDays"
                            },
                            "vpc_cidr": {
                                "Ref": "VPCCidr"
                            },
                            "transit_vpc": {
                                "Fn::FindInMap": [
                                    "VPC",
                                    {
                                        "Ref": "VPCOptions"
                                    },
                                    "TransitVPC"
                                ]
                            }
                        }
                    },
                    {
                        "file_name": "parameters/core_accounts/aws-landing-zone-primary-account-vpc.json.j2",
                        "parameters": {
                            "vpc_cidr": {
                                "Ref": "ADConnectorVPCCIDR"
                            },
                            "private_subnet1a_cidr": {
                                "Ref": "ADConnectorPrivateSubnet1CIDR"
                            },
                            "private_subnet2a_cidr": {
                                "Ref": "ADConnectorPrivateSubnet2CIDR"
                            },
                            "logs_retention_in_days": {
                                "Ref": "LogsRetentionInDays"
                            }
                        }
                    },
                    {
                        "file_name": "parameters/core_accounts/aws-landing-zone-rdgw.json.j2",
                        "parameters": {
                            "no_of_rdgw_hosts": {
                                "Ref": "NumberOfRDGWHosts"
                            },
                            "rdgw_instance_type": {
                                "Ref": "RDGWInstanceType"
                            },
                            "rdgw_cidr": {
                                "Ref": "RDGWCIDR"
                            }
                        }
                    },
                    {
                        "file_name": "parameters/aws_baseline/aws-landing-zone-config-rules.json.j2",
                        "parameters": {
                            "enable_encrypted_volumes_rule": {
                                "Ref": "EnableEncryptedVolumesRule"
                            },
                            "enable_rds_encryption_rule": {
                                "Ref": "EnableRdsEncryptionRule"
                            },
                            "enable_s3_public_read_rule": {
                                "Ref": "EnableS3PublicReadRule"
                            },
                            "enable_s3_public_write_rule": {
                                "Ref": "EnableS3PublicWriteRule"
                            },
                            "enable_s3_server_side_encryption_rule": {
                                "Ref": "EnableS3ServerSideEncryptionRule"
                            },
                            "enable_root_mfa_rule": {
                                "Ref": "EnableRootMfaRule"
                            },
                            "enable_iam_password_policy_rule": {
                                "Ref": "EnableIamPasswordPolicyRule"
                            },
                            "enable_restricted_common_ports_rule": {
                                "Ref": "EnableRestrictedCommonPortsRule"
                            },
                            "enable_restricted_ssh_rule": {
                                "Ref": "EnableRestrictedSshRule"
                            }
                        }
                    },
                    {
                        "file_name": "parameters/core_accounts/aws-landing-zone-notification.json.j2",
                        "parameters": {
                            "subscribe_to_all_configuration_topic": {
                                "Ref": "SubscribeAllChangeEventsEmailToTopic"
                            }
                        }
                    }
                ],
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LandingZoneDeploymentLambda",
                        "Arn"
                    ]
                }
            }
        },
        "StateMachineTriggerLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "StateMachineTriggerLambdaRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LandingZoneStateMachineTriggerLambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                   ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/lambda/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:GetParameter",
                                        "ssm:DeleteParameter",
                                        "ssm:GetParametersByPath",
                                        "ssm:DescribeParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:Encrypt",
                                        "kms:Decrypt",
                                        "kms:ReEncryptFrom",
                                        "kms:ReEncryptTo",
                                        "kms:GenerateDataKey",
                                        "kms:GenerateDataKeyWithoutPlaintext",
                                        "kms:DescribeKey"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:ListBucketByTags",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListAllMyBuckets",
                                        "s3:PutBucketLogging",
                                        "s3:ListBucketVersions",
                                        "s3:PutBucketPolicy",
                                        "s3:CreateBucket",
                                        "s3:ListBucket",
                                        "s3:GetBucketPolicy"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "states:ListExecutions",
                                        "states:StartExecution",
                                       "states:StopExecution"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "OrganizationsStateMachine"
                                        },
                                        {
                                            "Ref": "ServiceControlPolicyMachine"
                                        },
                                        {
                                            "Ref": "StackSetStateMachine"
                                        },
                                        {
                                            "Ref": "ServiceCatalogStateMachine"
                                        },
                                        {
                                            "Ref": "LaunchAVMStateMachine"
                                        },
                                        {
                                            "Ref": "CheckAVMExistsStateMachine"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "states:DescribeStateMachine",
                                        "states:DescribeStateMachineForExecution",
                                        "states:DescribeExecution"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:PutJobSuccessResult",
                                        "codepipeline:PutJobFailureResult"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "organizations:ListRoots",
                                        "organizations:ListOrganizationalUnitsForParent",
                                        "organizations:ListAccountsForParent",
                                        "organizations:DescribeAccount"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": "arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeRegions"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StateMachineTriggerLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "log_level": {
                            "Fn::FindInMap": [
                                "LambdaFunction",
                                "Logging",
                                "Level"
                            ]
                        },
                        "kms_key_alias_name": {
                            "Fn::FindInMap": [
                                "KMS",
                                "Alias",
                                "Name"
                            ]
                        },
                        "staging_bucket": {
                            "Ref": "LandingZonePipelineArtifactS3Bucket"
                        },
                        "wait_time": 5,
                        "sm_arn_account": {
                            "Ref": "OrganizationsStateMachine"
                        },
                        "sm_arn_stack_set": {
                            "Ref": "StackSetStateMachine"
                        },
                        "sm_arn_service_control_policy": {
                            "Ref": "ServiceControlPolicyMachine"
                        },
                        "sm_arn_service_catalog": {
                            "Ref": "ServiceCatalogStateMachine"
                        },
                        "sm_arn_baseline_resources": {
                            "Ref": "StackSetStateMachine"
                        },
                        "sm_arn_launch_avm": {
                            "Ref": "LaunchAVMStateMachine"
                        },
                        "sm_arn_check_avm_exists": {
                            "Ref": "CheckAVMExistsStateMachine"
                        },
                        "lambda_arn_param_name": {
                            "Fn::FindInMap": [
                                "SSMParameterNames",
                                "LandingZoneLambdaParameterName",
                                "Name"
                            ]
                        }
                    }
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": "aws-landing-zone/v1.0.2/aws-landing-zone-state-machine-trigger.zip"
                },
                "FunctionName": "LandingZoneStateMachineTriggerLambda",
                "Description": "AWS Landing Zone State Machine Trigger",
                "Handler": "state_machine_trigger.lambda_handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "StateMachineTriggerLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "StateMachineLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "StateMachineLambdaRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "StateMachineLambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/lambda/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "organizations:CreateOrganization",
                                        "organizations:CreateOrganizationalUnit",
                                        "organizations:ListPolicies",
                                        "organizations:ListPoliciesForTarget",
                                        "organizations:ListTargetsForPolicy",
                                        "organizations:ListParents",
                                        "organizations:ListRoots",
                                        "organizations:ListAccounts",
                                        "organizations:ListOrganizationalUnitsForParent",
                                        "organizations:ListAccountsForParent",
                                        "organizations:EnablePolicyType",
                                        "organizations:CreatePolicy",
                                        "organizations:UpdatePolicy",
                                        "organizations:DeletePolicy",
                                        "organizations:DetachPolicy",
                                        "organizations:AttachPolicy",
                                        "organizations:CreateAccount",
                                        "organizations:DescribeAccount",
                                        "organizations:DescribeCreateAccountStatus",
                                        "organizations:DescribeOrganization",
                                        "organizations:MoveAccount",
                                        "organizations:UpdateOrganizationalUnit",
                                        "organizations:DeleteOrganizationalUnit"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "servicecatalog:CreateConstraint",
                                        "servicecatalog:CreatePortfolio",
                                        "servicecatalog:CreateProduct",
                                        "servicecatalog:CreateTagOption",
                                        "servicecatalog:CreateProvisioningArtifact",
                                        "servicecatalog:UpdateProvisioningArtifact",
                                        "servicecatalog:UpdatePortfolio",
                                        "servicecatalog:UpdateProduct",
                                        "servicecatalog:UpdateTagOption",
                                        "servicecatalog:DeleteConstraint",
                                        "servicecatalog:DeletePortfolio",
                                        "servicecatalog:DeleteProduct",
                                        "servicecatalog:DescribePortfolio",
                                        "servicecatalog:DescribeProvisioningArtifact",
                                        "servicecatalog:DescribeConstraint",
                                        "servicecatalog:AssociatePrincipalWithPortfolio",
                                        "servicecatalog:AssociateProductWithPortfolio",
                                        "servicecatalog:AssociateTagOptionWithResource",
                                        "servicecatalog:DisassociatePrincipalFromPortfolio",
                                        "servicecatalog:DisassociateProductFromPortfolio",
                                        "servicecatalog:DisassociateTagOptionFromResource",
                                        "servicecatalog:DeleteProduct",
                                        "servicecatalog:ListTagOptions",
                                        "servicecatalog:ListResourcesForTagOption",
                                        "servicecatalog:ListPortfoliosForProduct",
                                        "servicecatalog:ListConstraintsForPortfolio",
                                        "servicecatalog:ListProvisioningArtifacts",
                                        "servicecatalog:ListPortfolios",
                                        "servicecatalog:DescribeRecord",
                                        "servicecatalog:SearchProvisionedProducts",
                                        "servicecatalog:UpdateProvisionedProduct",
                                        "servicecatalog:TerminateProvisionedProduct"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "servicecatalog:SearchProductsAsAdmin",
                                        "servicecatalog:ProvisionProduct"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "servicecatalog:accountLevel": "self"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:CreateStackSet",
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DeleteStackSet",
                                        "cloudformation:CreateStackInstances",
                                        "cloudformation:DeleteStackInstances",
                                        "cloudformation:DescribeStackInstance",
                                        "cloudformation:DescribeStackSetOperation",
                                        "cloudformation:DescribeStackSet",
                                        "cloudformation:UpdateStackSet",
                                        "cloudformation:UpdateStackInstances",
                                        "cloudformation:ValidateTemplate",
                                        "cloudformation:TagResource",
                                        "cloudformation:ListStackInstances",
                                        "cloudformation:GetTemplateSummary",
                                        "cloudformation:DescribeStacks"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:GetParameter",
                                        "ssm:GetParameters",
                                        "ssm:DeleteParameter",
                                        "ssm:DescribeParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:Encrypt",
                                        "kms:Decrypt",
                                        "kms:ReEncryptFrom",
                                        "kms:ReEncryptTo",
                                        "kms:GenerateDataKey",
                                        "kms:GenerateDataKeyWithoutPlaintext",
                                        "kms:DescribeKey"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole",
                                        "iam:PutRolePolicy",
                                        "iam:UpdateRoleDescription",
                                        "iam:DeleteServiceLinkedRole",
                                        "iam:GetServiceLinkedRoleDeletionStatus",
                                        "iam:GetGroup",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:ListBucketByTags",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListAllMyBuckets",
                                        "s3:PutBucketLogging",
                                        "s3:ListBucketVersions",
                                        "s3:PutBucketPolicy",
                                        "s3:CreateBucket",
                                        "s3:ListBucket",
                                        "s3:GetBucketPolicy"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInternetGateways",
                                        "ec2:DescribeRegions",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "ec2:DeleteInternetGateway",
                                        "ec2:DeleteSubnet",
                                        "ec2:DeleteVpc",
                                        "ec2:DetachInternetGateway",
                                        "ec2:CreateKeyPair",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:AuthorizeSecurityGroupEgress",
                                        "ec2:DeleteSecurityGroup",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "ec2:RevokeSecurityGroupEgress"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ds:ConnectDirectory",
                                        "ds:DescribeDirectories",
                                        "ds:DeleteDirectory"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": "arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StateMachineLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "log_level": {
                            "Fn::FindInMap": [
                                "LambdaFunction",
                                "Logging",
                                "Level"
                            ]
                        },
                        "kms_key_alias_name": {
                            "Fn::FindInMap": [
                                "KMS",
                                "Alias",
                                "Name"
                            ]
                        },
                        "lock_down_role_arns": {
                            "Fn::Sub": "${AWSCloudFormationStackSetAdministrationRole.Arn},arn:aws:iam::${AWS::AccountId}:role/StateMachineTriggerLambdaRole,arn:aws:iam::${AWS::AccountId}:role/LandingZoneLambdaRole,arn:aws:iam::${AWS::AccountId}:role/LandingZoneLambdaRoleADConnector,arn:aws:iam::${AWS::AccountId}:role/StateMachineLambdaRole,arn:aws:iam::${AWS::AccountId}:role/StateMachineLambdaRoleADConnector"
                        },
                        "unlock_role_arns": {
                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                        }
                    }
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": "aws-landing-zone/v1.0.2/aws-landing-zone-state-machine.zip"
                },
                "FunctionName": "LandingZoneStateMachineLambda",
                "Description": "AWS Landing Zone State Machine Handler",
                "Handler": "state_machine_router.lambda_handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "StateMachineLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LandingZoneLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "LandingZoneLambdaRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LandingZoneLambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                   "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/lambda/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "states:DescribeStateMachine",
                                        "states:DescribeStateMachineForExecution",
                                        "states:DescribeExecution",
                                        "states:ListExecutions",
                                        "states:StartExecution",
                                        "states:StopExecution"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "OrganizationsStateMachine"
                                        },
                                        {
                                            "Ref": "ServiceControlPolicyMachine"
                                        },
                                        {
                                            "Ref": "StackSetStateMachine"
                                        },
                                        {
                                            "Ref": "ServiceCatalogStateMachine"
                                        },
                                        {
                                            "Ref": "LaunchAVMStateMachine"
                                        },
                                        {
                                            "Ref": "CheckAVMExistsStateMachine"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInternetGateways",
                                        "ec2:DescribeRegions",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "ec2:DeleteInternetGateway",
                                        "ec2:DeleteSubnet",
                                        "ec2:DeleteVpc",
                                        "ec2:DetachInternetGateway",
                                        "ec2:CreateKeyPair",
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeVPCPeeringConnections",
                                        "ec2:CreateVPCPeeringConnection",
                                        "ec2:AcceptVPCPeeringConnection",
                                        "ec2:DeleteVPCPeeringConnection",
                                        "ec2:CreateRoute",
                                        "ec2:ReplaceRoute",
                                        "ec2:DeleteRoute"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:GetParameter",
                                        "ssm:GetParameters",
                                        "ssm:DeleteParameter"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:Encrypt",
                                        "kms:Decrypt",
                                        "kms:ReEncryptFrom",
                                        "kms:ReEncryptTo",
                                        "kms:GenerateDataKey",
                                        "kms:GenerateDataKeyWithoutPlaintext",
                                        "kms:DescribeKey"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": "arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LandingZoneLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "log_level": {
                            "Fn::FindInMap": [
                                "LambdaFunction",
                                "Logging",
                                "Level"
                            ]
                        },
                        "kms_key_alias_name": {
                            "Fn::FindInMap": [
                                "KMS",
                                "Alias",
                                "Name"
                            ]
                        },
                        "sm_arn_account": {
                            "Ref": "OrganizationsStateMachine"
                        },
                        "sm_arn_stack_set": {
                            "Ref": "StackSetStateMachine"
                        },
                        "sm_arn_service_control_policy": {
                            "Ref": "ServiceControlPolicyMachine"
                        },
                        "sm_arn_service_catalog": {
                            "Ref": "ServiceCatalogStateMachine"
                        },
                        "sm_arn_baseline_resources": {
                            "Ref": "StackSetStateMachine"
                        },
                        "sm_arn_launch_avm": {
                            "Ref": "LaunchAVMStateMachine"
                        },
                        "sm_arn_check_avm_exists": {
                            "Ref": "CheckAVMExistsStateMachine"
                        }
                    }
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": "aws-landing-zone/v1.0.2/aws-landing-zone-avm.zip"
                },
                "Description": "AWS Lambda-backed Custom Resources for AVM",
                "FunctionName": "LandingZone",
                "Handler": "lambda_custom_resource.lambda_handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "LandingZoneLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "VPCCalculator": {
            "Type": "Custom::VPCCalculator",
            "Properties": {
                "VPCCidr": {
                    "Ref": "VPCCidr"
               },
                "PublicSubnets": {
                    "Fn::FindInMap": [
                        "VPC",
                        {
                            "Ref": "VPCOptions"
                        },
                        "PublicSubnets"
                    ]
                },
                "PrivateSubnets": {
                    "Fn::FindInMap": [
                        "VPC",
                        {
                            "Ref": "VPCOptions"
                        },
                        "PrivateSubnets"
                    ]
                },
                "AvailabilityZones": {
                    "Fn::FindInMap": [
                        "VPC",
                        {
                            "Ref": "VPCOptions"
                        },
                        "AvailabilityZones"
                    ]
                },
                "CreatePrivateSubnets": {
                    "Fn::FindInMap": [
                        "VPC",
                        {
                            "Ref": "VPCOptions"
                        },
                        "CreatePrivateSubnets"
                    ]
                },
                "CreateAdditionalPrivateSubnets": {
                    "Fn::FindInMap": [
                        "VPC",
                        {
                            "Ref": "VPCOptions"
                        },
                        "CreateAdditionalPrivateSubnets"
                    ]
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LandingZoneLambda",
                        "Arn"
                    ]
                }
            }
        },
        "LandingZoneLambdaParameter": {
            "DependsOn": [
                "LandingZoneLambda"
            ],
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::FindInMap": [
                        "SSMParameterNames",
                        "LandingZoneLambdaParameterName",
                        "Name"
                    ]
                },
                "Description": "Contains the Lambda ARN for AVM Custom Resource",
                "Type": "String",
                "Value": {
                    "Fn::Sub": "${LandingZoneLambda.Arn}"
                }
            }
        },
        "StateMachineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    {
                                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                                    }
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "OrganizationsStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneOrganizationsStateMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine that manages the AWS Organization, Organizational Units and Accounts\",\n  \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check Organization Pass\"\n    },\n    \"Check Organization Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"list_roots\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Organization\"\n    },\n    \"Check Organization\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Check Organization Unit Pass\"\n    },\n    \"Check Organization Unit Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"check_organization_unit\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Organization Unit\"\n    },\n    \"Check Organization Unit\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Check OU List?\"\n    },\n    \"Check OU List?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OUNextToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Check Account Pass\"\n        }\n      ],\n      \"Default\": \"Check OU List Wait\"\n    },\n    \"Check OU List Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"Check Organization Unit\"\n    },\n    \"Check Account Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"list_accounts\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Account\"\n    },\n    \"Check Account\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Check Complete?\"\n    },\n    \"Check Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.NextToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Request Type\"\n        }\n      ],\n      \"Default\": \"Check Account Wait\"\n    },\n    \"Check Account Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"Check Account\"\n    },\n    \"Request Type\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Update\",\n          \"Next\": \"Create Update\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Delete\",\n          \"Next\": \"Delete\"\n        }\n      ],\n      \"Default\": \"Create Update\"\n    },\n    \"Create Update\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Create Organization Choice\"\n    },\n    \"Delete\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Account Id?\"\n    },\n    \"Create Organization Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RootId\",\n          \"StringEquals\": \"None\",\n          \"Next\": \"Create Organization Pass\"\n        }\n      ],\n      \"Default\": \"Create Organization Unit Choice\"\n    },\n    \"Create Organization Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"create_organization\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Organization\"\n    },\n    \"Create Organization\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Create Organization Unit Choice\"\n    },\n    \"Create Organization Unit Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OUId\",\n          \"StringEquals\": \"None\",\n          \"Next\": \"Create Organization Unit Pass\"\n        }\n      ],\n      \"Default\": \"Account Choice\"\n    },\n    \"Create Organization Unit Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"create_organization_unit\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Organization Unit\"\n    },\n    \"Create Organization Unit\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Account Choice\"\n    },\n    \"Account Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ResourceProperties.AccountName\",\n          \"StringEquals\": \"\",\n          \"Next\": \"Describe Organization Pass\"\n        },\n        {\n          \"Variable\": \"$.AccountId\",\n          \"StringEquals\": \"None\",\n          \"Next\": \"Create Account Pass\"\n        }\n      ],\n      \"Default\": \"Get ParentId Pass\"\n    },\n    \"Create Account Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"create_account\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Account\"\n    },\n    \"Create Account\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Organization initializing?\"\n    },\n    \"Organization initializing?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n         {\n          \"Variable\": \"$.OrganizationInitializing\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Wait On Create Account\"\n        },\n        {\n          \"Variable\": \"$.OrganizationInitializing\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Wait on Organization initialization\"\n        }\n\n      ],\n      \"Default\": \"Wait On Create Account\"\n    },\n    \"Wait on Organization initialization\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 300,\n      \"Next\": \"Create Account Pass\"\n    },\n    \"Create Account Status Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"describe_account_status\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Account Status\"\n    },\n    \"Create Account Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Create Complete?\"\n    },\n    \"Create Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.CreateAccountStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"Account Create Failed\"\n        },\n        {\n          \"Variable\": \"$.CreateAccountStatus\",\n          \"StringEquals\": \"SUCCEEDED\",\n          \"Next\": \"Move Account Pass\"\n        }\n      ],\n      \"Default\": \"Wait On Create Account\"\n    },\n    \"Wait On Create Account\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Create Account Status Pass\"\n    },\n    \"Account Create Failed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Account Id?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.AccountId\",\n          \"StringEquals\": \"None\",\n          \"Next\": \"Organization Unit Id?\"\n        }\n      ],\n      \"Default\": \"Get ParentId Pass\"\n    },\n    \"Get ParentId Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"list_parents\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Get ParentId\"\n    },\n    \"Get ParentId\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Move Account Pass\"\n    },\n    \"Move Account Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"move_account\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Move Account\"\n    },\n    \"Move Account\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Check Account Status Pass\"\n    },\n    \"Check Account Status Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"account_initialization_check\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Account Status\"\n    },\n    \"Check Account Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is New Account Initialized?\"\n    },\n    \"Is New Account Initialized?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.AccountInitialized\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Request Type Choice\"\n        },\n        {\n          \"Variable\": \"$.AccountInitialized\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Wait for 5 minutes\"\n        }\n      ],\n      \"Default\": \"Wait for 5 minutes\"\n    },\n    \"Wait for 5 minutes\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 300,\n      \"Next\": \"Check Account Status Pass\"\n    },\n    \"Request Type Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Create\",\n          \"Next\": \"Describe Organization Pass\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Update\",\n          \"Next\": \"Describe Organization Pass\"\n        }\n      ],\n      \"Default\": \"Organization Unit Id?\"\n    },\n    \"Organization Unit Id?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OUId\",\n          \"StringEquals\": \"None\",\n          \"Next\": \"Organization Unit Not Found\"\n        }\n      ],\n      \"Default\": \"Check Organization Unit Is Empty Pass\"\n    },\n    \"Organization Unit Not Found\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Check Organization Unit Is Empty Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"list_accounts_for_parent\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Organization Unit Is Empty\"\n    },\n    \"Check Organization Unit Is Empty\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Delete Organization Unit Choice\"\n    },\n    \"Delete Organization Unit Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OrgUnitAccounts\",\n          \"NumericEquals\": 0,\n          \"Next\": \"Delete Organization Unit Pass\"\n        }\n      ],\n      \"Default\": \"Organization Unit Not Empty\"\n    },\n    \"Delete Organization Unit Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"delete_organization_unit\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Organization Unit\"\n    },\n    \"Delete Organization Unit\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Organization Unit Not Empty\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Describe Organization Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"describe_organization\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Describe Organization\"\n    },\n    \"Describe Organization\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"SSM Parameter Store Pass\"\n    },\n    \"SSM Parameter Store Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"ssm_put_parameters\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Put Parameters\"\n    },\n    \"Put Parameters\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Update Stack Sets Assume Role Policy Pass\"\n    },\n    \"Update Stack Sets Assume Role Policy Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"Organizations\",\n        \"FunctionName\": \"lock_down_stack_sets_role\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Stack Sets Assume Role Policy\"\n    },\n    \"Update Stack Sets Assume Role Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Send Success Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_success_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Success Response\"\n    },\n    \"Send Success Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Success\"\n    },\n    \"Success\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Send Failed Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_failure_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Failed Response\"\n    },\n    \"Send Failed Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Failed\"\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}"
                }
            }
        },
        "ServiceControlPolicyMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneServiceControlPolicyMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine that manages the Service Control Policies.\",\n   \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Create/Delete or Attach/Detach Policy?\"\n    },\n    \"Create/Delete or Attach/Detach Policy?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ResourceProperties.AccountId\",\n          \"StringEquals\": \"\",\n          \"Next\": \"Enable Policy Type params\"\n        },\n        {\n          \"Variable\": \"$.ResourceProperties.AccountId\",\n          \"StringGreaterThan\": \"\",\n          \"Next\": \"Attach/Detach Policy params\"\n        }\n      ]\n    },\n    \"Enable Policy Type params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"enable_policy_type\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Enable Policy Type\"\n    },\n    \"Enable Policy Type\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Wait\"\n    },\n    \"Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Create/Delete Policy params\"\n    },\n    \"Create/Delete Policy params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"list_policies\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check If Policy Exist?\"\n    },\n    \"Check If Policy Exist?\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Create or Delete Policy?\"\n    },\n    \"Create or Delete Policy?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"And\": [\n            {\n              \"Or\": [\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Create\"\n                },\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Update\"\n                }\n              ]\n            },\n            {\n              \"Variable\": \"$.PolicyExist\",\n              \"StringEquals\": \"no\"\n            }\n          ],\n          \"Next\": \"Create Policy Params\"\n        },\n        {\n          \"And\": [\n            {\n              \"Or\": [\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Create\"\n                },\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Update\"\n                }\n              ]\n            },\n            {\n              \"Variable\": \"$.PolicyExist\",\n              \"StringEquals\": \"yes\"\n            }\n          ],\n          \"Next\": \"Update Policy Params\"\n        },\n        {\n          \"And\": [\n            {\n              \"Variable\": \"$.RequestType\",\n              \"StringEquals\": \"Delete\"\n            },\n            {\n              \"Variable\": \"$.PolicyExist\",\n              \"StringEquals\": \"yes\"\n            }\n          ],\n          \"Next\": \"Detach Policy from All Accounts Params\"\n        },\n        {\n          \"And\": [\n            {\n              \"Variable\": \"$.RequestType\",\n              \"StringEquals\": \"Delete\"\n            },\n            {\n              \"Variable\": \"$.PolicyExist\",\n              \"StringEquals\": \"no\"\n            }\n          ],\n          \"Next\": \"Finish\"\n        }\n      ]\n    },\n    \"Create Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"create_policy\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Policy\"\n    },\n    \"Create Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Cloudformation Response Params\"\n    },\n    \"Update Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"update_policy\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Policy\"\n    },\n    \"Update Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Cloudformation Response Params\"\n    },\n    \"Detach Policy from All Accounts Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"detach_policy_from_all_accounts\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Detach Policy from All Accounts\"\n    },\n    \"Detach Policy from All Accounts\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Delete Policy Params\"\n    },\n    \"Delete Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"delete_policy\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Policy\"\n    },\n    \"Delete Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Cloudformation Response Params\"\n    },\n    \"Attach/Detach Policy params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"configure_count\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"ConfigureCount\"\n    },\n    \"ConfigureCount\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Iterator params\"\n    },\n    \"Iterator params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"iterator\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Iterator\"\n    },\n    \"Iterator\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"IsCountReached\"\n    },\n    \"IsCountReached\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.Continue\",\n          \"BooleanEquals\": true,\n          \"Next\": \"List Policy Params\"\n        }\n      ],\n      \"Default\": \"Cloudformation Response Params\"\n    },\n    \"List Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"list_policies\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Policy\"\n    },\n    \"List Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"List Policies For Account Params\"\n    },\n    \"List Policies For Account Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"list_policies_for_account\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Policies For Account\"\n    },\n    \"List Policies For Account\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Attach or Detach Policy Choice\"\n    },\n    \"Attach or Detach Policy Choice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"And\": [\n            {\n              \"Or\": [\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Create\"\n                },\n                {\n                  \"Variable\": \"$.RequestType\",\n                  \"StringEquals\": \"Update\"\n                }\n              ]\n            },\n            {\n              \"Variable\": \"$.ResourceProperties.Operation\",\n              \"StringEquals\": \"Attach\"\n            }\n          ],\n          \"Next\": \"Check if Policy is attached?\"\n        },\n        {\n          \"And\": [\n            {\n              \"Variable\": \"$.RequestType\",\n              \"StringEquals\": \"Delete\"\n            },\n            {\n              \"Variable\": \"$.ResourceProperties.Operation\",\n              \"StringEquals\": \"Attach\"\n            }\n          ],\n          \"Next\": \"Check if Policy is detached?\"\n        },\n        {\n          \"Variable\": \"$.ResourceProperties.Operation\",\n          \"StringEquals\": \"Detach\",\n          \"Next\": \"Check if Policy is detached?\"\n        }\n      ],\n      \"Default\": \"Invalid Operation\"\n    },\n    \"Invalid Operation\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Invalid Operation Type, valid choices are [Attach, Detach]\",\n      \"Error\": \"Returning NULL in the response.\"\n    },\n    \"Check if Policy is attached?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.PolicyAttached\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Iterator params\"\n        },\n        {\n          \"Variable\": \"$.PolicyAttached\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Attach Policy Params\"\n        }\n      ],\n      \"Default\": \"Invalid Operation\"\n    },\n    \"Attach Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"attach_policy\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Attach Policy\"\n    },\n    \"Attach Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Iterator params\"\n    },\n    \"Check if Policy is detached?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.PolicyAttached\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Detach Policy Params\"\n        },\n        {\n          \"Variable\": \"$.PolicyAttached\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Iterator params\"\n        }\n      ],\n      \"Default\": \"Invalid Operation\"\n    },\n    \"Detach Policy Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"SCP\",\n        \"FunctionName\": \"detach_policy\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Detach Policy\"\n    },\n    \"Detach Policy\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Iterator params\"\n    },\n    \"Cloudformation Response Params\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_success_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Response\"\n    },\n    \"Send Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Finish\"\n    },\n    \"Finish\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}"
                }
            }
        },
        "StackSetStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneStackSetStateMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine that manages the CloudFormation stacks in multiple accounts using StackSet APIs.\",\n  \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Describe StackSet Pass\"\n    },\n    \"Describe StackSet Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"describe_stack_set\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check StackSet Existence\"\n    },\n    \"Check StackSet Existence\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"StackSets: Create or Delete?\"\n    },\n    \"StackSets: Create or Delete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Create\",\n          \"Next\": \"Skip StackSets?\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Update\",\n          \"Next\": \"Skip StackSets?\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Delete\",\n          \"Next\": \"Describe StackSet\"\n        }\n      ],\n      \"Default\": \"Undefined Request Type\"\n    },\n    \"Undefined Request Type\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Skip StackSets?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ResourceProperties.TemplateURL\",\n          \"StringEquals\": \"\",\n          \"Next\": \"Check Instance Pass\"\n        }\n      ],\n      \"Default\": \"Does StackSet Exist?\"\n    },\n    \"Does StackSet Exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.StackSetExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Deploy StackSet Pass\"\n        },\n        {\n          \"Variable\": \"$.StackSetExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"List StackInstances Accounts Pass\"\n        }\n      ],\n      \"Default\": \"Unable to describe StackSet\"\n    },\n    \"Unable to describe StackSet\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Deploy StackSet Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"create_stack_set\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Deploy StackSet\"\n    },\n    \"Deploy StackSet\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"StackSet Deployed?\"\n    },\n    \"StackSet Deployed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.StackSetStatus\",\n          \"StringEquals\": \"success\",\n          \"Next\": \"Deploy Stack Instance?\"\n        },\n        {\n          \"Variable\": \"$.StackSetStatus\",\n          \"StringEquals\": \"failure\",\n          \"Next\": \"StackSet Deployment Failed\"\n        }\n      ],\n      \"Default\": \"StackSet Deployment Failed\"\n    },\n    \"StackSet Deployment Failed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Deploy Stack Instance?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"And\": [\n            {\n              \"Variable\": \"$.ResourceProperties.AccountList\",\n              \"StringLessThan\": \"1\"\n            },\n            {\n              \"Variable\": \"$.ResourceProperties.RegionList\",\n              \"StringLessThan\": \"1\"\n            }\n          ],\n          \"Next\": \"StackSet Deployed\"\n        }\n      ],\n      \"Default\": \"Deploy Stack Instance Pass\"\n    },\n    \"StackSet Deployed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Export Stack Output Pass\"\n    },\n    \"Deploy Stack Instance Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"create_stack_instances\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Deploy Stack Instance\"\n    },\n    \"Deploy Stack Instance\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Create Operation ID?\"\n    },\n    \"Create Operation ID?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationId\",\n          \"StringEquals\": \"OperationInProgressException\",\n          \"Next\": \"Waiting on create... OperationInProgress\"\n        }\n      ],\n      \"Default\": \"Create Task Running\"\n    },\n    \"Waiting on create... OperationInProgress\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\": \"Deploy Stack Instance\"\n    },\n    \"Create Task Running\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Create Task Pass\"\n    },\n    \"Create Task Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"describe_stack_set_operation\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Task Status?\"\n    },\n    \"Create Task Status?\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Create Task Completed?\"\n    },\n    \"Create Task Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"SUCCEEDED\",\n          \"Next\": \"Create Task Completed\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"RUNNING\",\n          \"Next\": \"Create Task Running\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"Create Task Failed\"\n        }\n      ],\n      \"Default\": \"Create Task Failed\"\n    },\n    \"Create Task Completed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Export Stack Output Pass\"\n    },\n    \"Create Task Failed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"List StackInstances Accounts Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"list_stack_instances_account_ids\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List StackInstances Accounts\"\n    },\n    \"List StackInstances Accounts\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Check List StackInstances Accounts Complete?\"\n    },\n    \"Check List StackInstances Accounts Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.NextToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Update StackSet Pass\"\n        }\n      ],\n      \"Default\": \"Check List StackInstances Accounts Wait\"\n    },\n    \"Check List StackInstances Accounts Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"List StackInstances Accounts\"\n    },\n    \"Update StackSet Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"update_stack_set\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update StackSet\"\n    },\n    \"Update StackSet\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Update Operation ID?\"\n    },\n    \"Update Operation ID?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationId\",\n          \"StringEquals\": \"OperationInProgressException\",\n          \"Next\": \"Waiting on update... OperationInProgress\"\n        }\n      ],\n      \"Default\": \"Update Task Running\"\n    },\n    \"Waiting on update... OperationInProgress\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\": \"Update StackSet\"\n    },\n    \"Update Task Running\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Update Task Pass\"\n    },\n    \"Update Task Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"describe_stack_set_operation\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Task Status?\"\n    },\n    \"Update Task Status?\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Update Task Completed?\"\n    },\n    \"Update Task Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"SUCCEEDED\",\n          \"Next\": \"Check Instance Pass\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"RUNNING\",\n          \"Next\": \"Update Task Running\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"STOPPED\",\n          \"Next\": \"Update Task Completed\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"STOPPING\",\n          \"Next\": \"Update Task Running\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"Update Task Failed\"\n        }\n      ],\n      \"Default\": \"Update Task Failed\"\n    },\n    \"Update Task Completed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Export Stack Output Pass\"\n    },\n    \"Update Task Failed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Check Instance Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"list_stack_instances\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Instance\"\n    },\n    \"Check Instance\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"Next\": \"Check Complete?\"\n    },\n    \"Check Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.NextToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Create Instance?\"\n        }\n      ],\n      \"Default\": \"Check Instance Wait\"\n    },\n    \"Check Instance Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"Check Instance\"\n    },\n    \"Create Instance?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.CreateInstance\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Deploy Stack Instance?\"\n        },\n        {\n          \"Variable\": \"$.CreateInstance\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Export Stack Output Pass\"\n        }\n      ],\n      \"Default\": \"Export Stack Output Pass\"\n    },\n    \"Describe StackSet\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"describe_stack_set\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Describe StackSet Function\"\n    },\n    \"Describe StackSet Function\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check StackSet Existence?\"\n    },\n    \"Check StackSet Existence?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.StackSetExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"StackSet Not Found\"\n        },\n        {\n          \"Variable\": \"$.StackSetExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"List Stack Instances Pass\"\n        }\n      ],\n      \"Default\": \"Unable to find StackSet\"\n    },\n    \"Unable to find StackSet\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"StackSet Not Found\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"List Stack Instances Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"list_stack_instances\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Stack Instances\"\n    },\n    \"List Stack Instances\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Does Stack Instance Exist?\"\n    },\n    \"Does Stack Instance Exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.InstanceExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Delete Stack Instances Pass\"\n        },\n        {\n          \"Variable\": \"$.InstanceExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Event from CloudFormation?\"\n        }\n      ],\n      \"Default\": \"Unable to list stack instances\"\n    },\n    \"Event from CloudFormation?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ResourceProperties.TemplateURL\",\n          \"StringEquals\": \"\",\n          \"Next\": \"Send Success Pass\"\n        }\n      ],\n      \"Default\": \"Delete StackSet Pass\"\n    },\n    \"Unable to list stack instances\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Delete Stack Instances Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"delete_stack_instances\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Stack Instance Function\"\n    },\n    \"Delete Stack Instance Function\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Delete Operation ID?\"\n    },\n    \"Delete Operation ID?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationId\",\n          \"StringEquals\": \"OperationInProgressException\",\n          \"Next\": \"Waiting on delete... OperationInProgress\"\n        }\n      ],\n      \"Default\": \"Delete Task Running\"\n    },\n    \"Waiting on delete... OperationInProgress\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\": \"Delete Stack Instance Function\"\n    },\n    \"Delete Task Running\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Delete Task Pass\"\n    },\n    \"Delete Task Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"describe_stack_set_operation\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Task Status?\"\n    },\n    \"Delete Task Status?\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Delete Task Completed?\"\n    },\n    \"Delete Task Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"SUCCEEDED\",\n          \"Next\": \"List Stack Remaining Instances Pass\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"RUNNING\",\n          \"Next\": \"Delete Task Running\"\n        },\n        {\n          \"Variable\": \"$.OperationStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"Delete Task Failed\"\n        }\n      ],\n      \"Default\": \"Delete Task Failed\"\n    },\n    \"List Stack Remaining Instances Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"list_stack_instances\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Stack Instances Again\"\n    },\n    \"List Stack Instances Again\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Check Remaining Stack Instance?\"\n    },\n    \"Check Remaining Stack Instance?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Or\": [\n            {\n              \"Variable\": \"$.InstanceExist\",\n              \"StringEquals\": \"yes\"\n            },\n            {\n              \"Variable\": \"$.ResourceProperties.TemplateURL\",\n              \"StringEquals\": \"\"\n            }\n          ],\n          \"Next\": \"Stack Instance Deleted\"\n        },\n        {\n          \"Variable\": \"$.InstanceExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Delete StackSet Pass\"\n        }\n      ],\n      \"Default\": \"Send Failed Pass\"\n    },\n    \"Stack Instance Deleted\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Delete Task Failed\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Failed Pass\"\n    },\n    \"Delete StackSet Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CloudFormation\",\n        \"FunctionName\": \"delete_stack_set\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete StackSet Function\"\n    },\n    \"Delete StackSet Function\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"InputPath\": \"$\",\n      \"Next\": \"Deleted StackSet\"\n    },\n    \"Deleted StackSet\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Export Stack Output Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"export_cfn_output\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Export Stack Output\"\n    },\n    \"Export Stack Output\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"SSM Parameter Store Pass\"\n    },\n    \"SSM Parameter Store Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"ssm_put_parameters\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Put Parameters\"\n    },\n    \"Put Parameters\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Send Success Pass\"\n    },\n    \"Send Success Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_success_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Success Response\"\n    },\n    \"Send Success Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Success\"\n    },\n    \"Success\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Send Failed Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_failure_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Failed Response\"\n    },\n    \"Send Failed Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Failed\"\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}"
                }
            }
        },
        "ServiceCatalogStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneServiceCatalogStateMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine that manages the Service Catalog Portfolio and Products.\",\n  \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Service Catalog: Create or Delete?\"\n    },\n    \"Service Catalog: Create or Delete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Create\",\n          \"Next\": \"List Portfolio Pass\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Update\",\n          \"Next\": \"List Portfolio Pass\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Delete\",\n          \"Next\": \"Check Portfolio Pass\"\n        }\n      ],\n      \"Default\": \"Undefined Request Type\"\n    },\n    \"Undefined Request Type\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Undefined Request Type\",\n      \"Error\": \"Undefined Request Type\"\n    },\n    \"List Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_portfolios\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Portfolio Existence\"\n    },\n    \"Check Portfolio Existence\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does Portfolio Exist?\"\n    },\n    \"Does Portfolio Exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.PortfolioExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Create Portfolio Pass\"\n        },\n        {\n          \"Variable\": \"$.PortfolioExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Update Portfolio Pass\"\n        }\n      ],\n      \"Default\": \"Unable to find portfolio\"\n    },\n    \"Unable to find portfolio\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Portfolio Name not found in the response\",\n      \"Error\": \"Returning NULL in the response.\"\n    },\n    \"Create Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"create_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Portfolio\"\n    },\n    \"Create Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Associate Principal with Portfolio Pass\"\n    },\n    \"Update Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"update_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Portfolio\"\n    },\n    \"Update Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Associate Principal with Portfolio Pass\"\n    },\n    \"Associate Principal with Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"associate_principal_with_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Associate Principal with Portfolio\"\n    },\n    \"Associate Principal with Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Search Products Pass\"\n    },\n    \"Search Products Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"search_products_as_admin\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Search Products\"\n    },\n    \"Search Products\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does Product Exist?\"\n    },\n    \"Does Product Exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ProductExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Create Product Pass\"\n        },\n        {\n          \"Variable\": \"$.ProductExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Update Product Pass\"\n        }\n      ],\n      \"Default\": \"Unable to find product\"\n    },\n    \"Unable to find product\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Product Name not found in the response\"\n    },\n    \"Create Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"create_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Product\"\n    },\n    \"Create Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"List Portfolios for the Product Pass\"\n    },\n    \"Update Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"update_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Product\"\n    },\n    \"Update Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"List Artifacts Pass\"\n    },\n    \"List Artifacts Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_provisioning_artifacts\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Artifacts\"\n    },\n    \"List Artifacts\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Reaching Version Limit?\"\n    },\n    \"Reaching Version Limit?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.DeleteOldestArtifact\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Create Artifact Pass\"\n        },\n        {\n          \"Variable\": \"$.DeleteOldestArtifact\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Delete Artifact Pass\"\n        }\n      ],\n      \"Default\": \"Delete Artifact Pass\"\n    },\n    \"Delete Artifact Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"delete_provisioning_artifact\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Artifact\"\n    },\n    \"Delete Artifact\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Create Artifact Pass\"\n    },\n    \"Create Artifact Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"create_provisioning_artifact\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Artifact\"\n    },\n    \"Create Artifact\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"New Artifact Status Pass\"\n    },\n    \"New Artifact Status Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"describe_provisioning_artifact\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"New Artifact Status\"\n    },\n    \"New Artifact Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is New Artifact Available?\"\n    },\n    \"Is New Artifact Available?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"AVAILABLE\",\n          \"Next\": \"Hide Previous Artifact?\"\n        },\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"New Artifact Creation Failed\"\n        },\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"CREATING\",\n          \"Next\": \"New Artifact: Wait for 5 seconds\"\n        }\n      ],\n      \"Default\": \"New Artifact: Wait for 5 seconds\"\n    },\n    \"New Artifact: Wait for 5 seconds\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"New Artifact Status Pass\"\n    },\n    \"New Artifact Creation Failed\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to create the new version.\"\n    },\n    \"Hide Previous Artifact?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ResourceProperties.SCProduct.HideOldVersions\",\n          \"StringEquals\": \"Yes\",\n          \"Next\": \"Update Artifact Pass\"\n        }\n      ],\n      \"Default\": \"List Portfolios for the Product Pass\"\n    },\n    \"Update Artifact Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"update_provisioning_artifact\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Artifact\"\n    },\n    \"Update Artifact\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Update Artifact Status Pass\"\n    },\n    \"Update Artifact Status Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"describe_provisioning_artifact\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Artifact Status\"\n    },\n    \"Update Artifact Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is Updated Artifact Available?\"\n    },\n    \"Is Updated Artifact Available?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"AVAILABLE\",\n          \"Next\": \"List Portfolios for the Product Pass\"\n        },\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"FAILED\",\n          \"Next\": \"Artifact Update Failed\"\n        },\n        {\n          \"Variable\": \"$.ProvisioningArtifactStatus\",\n          \"StringEquals\": \"CREATING\",\n          \"Next\": \"Update Artifact: Wait for 5 seconds\"\n        }\n      ],\n      \"Default\": \"Update Artifact: Wait for 5 seconds\"\n    },\n    \"Update Artifact: Wait for 5 seconds\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"Update Artifact Status Pass\"\n    },\n    \"Artifact Update Failed\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to create the new version.\"\n    },\n    \"List Portfolios for the Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_portfolios_for_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Portfolios for the Product\"\n    },\n    \"List Portfolios for the Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is Product already associated with the portfolio?\"\n    },\n    \"Is Product already associated with the portfolio?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.AlreadyAssociated\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Associate Product with Portfolio Pass\"\n        },\n        {\n          \"Variable\": \"$.AlreadyAssociated\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"List Launch Constraints Pass\"\n        }\n      ],\n      \"Default\": \"Unable to check\"\n    },\n    \"Unable to check\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to check if product is already associated\"\n    },\n    \"Associate Product with Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"associate_product_with_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Associate Product with Portfolio\"\n    },\n    \"Associate Product with Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"List Launch Constraints Pass\"\n    },\n    \"List Launch Constraints Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_constraints_for_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"List Launch Constraints\"\n    },\n    \"List Launch Constraints\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does launch constraint exist?\"\n    },\n    \"Does launch constraint exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.LaunchConstraintExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Describe Constraint Pass\"\n        },\n        {\n          \"Variable\": \"$.LaunchConstraintExist\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Create Constraint Pass\"\n        }\n      ],\n      \"Default\": \"Unable to find a launch constraint\"\n    },\n    \"Unable to find a launch constraint\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to check if launch constraint exist\"\n    },\n    \"Describe Constraint Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"describe_constraint\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Describe Constraint\"\n    },\n    \"Describe Constraint\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does the role arn match?\"\n    },\n    \"Does the role arn match?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RoleArnMatched\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"SSM Parameter Store Pass\"\n        },\n        {\n          \"Variable\": \"$.RoleArnMatched\",\n          \"StringEquals\": \"no\",\n          \"Next\": \"Delete Constraint Pass\"\n        }\n      ],\n      \"Default\": \"Unable to match\"\n    },\n    \"Unable to match\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Unable to match the role arn\"\n    },\n    \"Delete Constraint Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"delete_constraint\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Constraint\"\n    },\n    \"Delete Constraint\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Create Constraint Pass\"\n    },\n    \"Create Constraint Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"create_constraint\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Create Constraint\"\n    },\n    \"Create Constraint\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"SSM Parameter Store Pass\"\n    },\n    \"SSM Parameter Store Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"ssm_put_parameters\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Put Parameters\"\n    },\n    \"Put Parameters\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Finish\"\n    },\n    \"Finish\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Check Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_portfolios\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Portfolio\"\n    },\n    \"Check Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check Product Pass\"\n    },\n    \"Check Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"search_products_as_admin\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Product\"\n    },\n    \"Check Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check Portfolios for the Product Pass\"\n    },\n    \"Check Portfolios for the Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_portfolios_for_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Portfolios for the Product\"\n    },\n    \"Check Portfolios for the Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check Launch Constraints Pass\"\n    },\n    \"Check Launch Constraints Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_constraints_for_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Launch Constraints\"\n    },\n    \"Check Launch Constraints\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Check Principals Pass\"\n    },\n    \"Check Principals Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"list_principals_for_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Check Principals\"\n    },\n    \"Check Principals\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does portfolio exist?\"\n    },\n    \"Does portfolio exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.PortfolioExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Does Constraint Exist?\"\n        }\n      ],\n      \"Default\": \"Finish\"\n    },\n    \"Does Constraint Exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.LaunchConstraintExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Delete Launch Constraint Pass\"\n        }\n      ],\n      \"Default\": \"Is product associated with the portfolio?\"\n    },\n    \"Delete Launch Constraint Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"delete_constraint\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Launch Constraint\"\n    },\n    \"Delete Launch Constraint\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is product associated with the portfolio?\"\n    },\n    \"Is product associated with the portfolio?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.AlreadyAssociated\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Dissociate Product with Portfolio Pass\"\n        }\n      ],\n      \"Default\": \"Does launch product exist?\"\n    },\n    \"Dissociate Product with Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"disassociate_product_from_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Dissociate Product with Portfolio\"\n    },\n    \"Dissociate Product with Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Does launch product exist?\"\n    },\n    \"Does launch product exist?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.ProductExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Delete Product Pass\"\n        }\n      ],\n      \"Default\": \"Is principal associated with Portfolio?\"\n    },\n    \"Delete Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"delete_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Product\"\n    },\n    \"Delete Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Is principal associated with Portfolio?\"\n    },\n    \"Is principal associated with Portfolio?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.PrincipalExist\",\n          \"StringEquals\": \"yes\",\n          \"Next\": \"Disassociate Principal Pass\"\n        }\n      ],\n      \"Default\": \"Delete Portfolio Pass\"\n    },\n    \"Disassociate Principal Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"disassociate_principal_from_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Disassociate Principal\"\n    },\n    \"Disassociate Principal\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Delete Portfolio Pass\"\n    },\n    \"Delete Portfolio Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"ServiceCatalog\",\n        \"FunctionName\": \"delete_portfolio\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Delete Portfolio\"\n    },\n    \"Delete Portfolio\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Finish\"\n    }\n  }\n}"
                }
            }
        },
        "LaunchAVMStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneLaunchAVMStateMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine to launch or terminate Service Catalog Product\",\n   \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Lookup Service Catalog Product Pass\"\n    },\n    \"Lookup Service Catalog Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"lookup_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Lookup Service Catalog Product\"\n    },\n    \"Lookup Service Catalog Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"ConfigureCount Pass\"\n    },\n    \"ConfigureCount Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"configure_count\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"ConfigureCount\"\n    },\n    \"ConfigureCount\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Iterator Pass\"\n    },\n    \"Iterator Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"iterator\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Iterator\"\n    },\n    \"Iterator\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"IsCountReached\"\n    },\n    \"IsCountReached\": {\n        \"Type\": \"Choice\",\n        \"Choices\": [\n            {\n                \"Variable\": \"$.Continue\",\n                \"BooleanEquals\": true,\n                \"Next\": \"Search Provisioned Product Pass\"\n            }\n        ],\n        \"Default\": \"Send Success Pass\"\n    },\n    \"Search Provisioned Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"search_provisioned_products\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Search Provisioned Product\"\n    },\n    \"Search Provisioned Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Search Complete?\"\n    },\n    \"Search Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.NextPageToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Does Provisioned Product Exist?\"\n        }\n      ],\n      \"Default\": \"Search Provisioned Product Account Wait\"\n    },\n    \"Search Provisioned Product Account Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 1,\n      \"Next\": \"Search Provisioned Product Pass\"\n    },\n    \"Does Provisioned Product Exist?\": {\n        \"Type\": \"Choice\",\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                  \"Variable\": \"$.ProvisionedProductExists\",\n                  \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"$.RequestType\",\n                \"StringEquals\": \"Create\"\n              }\n            ],\n            \"Next\": \"Update Provisioned Product Pass\"\n          },\n          {\n            \"And\": [\n              {\n                  \"Variable\": \"$.ProvisionedProductExists\",\n                  \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"$.RequestType\",\n                \"StringEquals\": \"Delete\"\n              }\n            ],\n            \"Next\": \"Terminate Provisioned Product Pass\"\n          },\n          {\n            \"And\": [\n              {\n                  \"Variable\": \"$.ProvisionedProductExists\",\n                  \"BooleanEquals\": false\n              },\n              {\n                \"Variable\": \"$.RequestType\",\n                \"StringEquals\": \"Create\"\n              }\n            ],\n            \"Next\": \"Launch Product Pass\"\n          },\n          {\n            \"And\": [\n              {\n                  \"Variable\": \"$.ProvisionedProductExists\",\n                  \"BooleanEquals\": false\n              },\n              {\n                \"Variable\": \"$.RequestType\",\n                \"StringEquals\": \"Delete\"\n              }\n            ],\n            \"Next\": \"Iterator Pass\"\n          }\n      ]\n    },\n    \"Update Provisioned Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"update_provisioned_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Update Provisioned Product\"\n    },\n    \"Update Provisioned Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Describe Provisioned Product Pass\"\n    },\n    \"Terminate Provisioned Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"terminate_provisioned_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Terminate Provisioned Product\"\n    },\n    \"Terminate Provisioned Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Describe Provisioned Product Pass\"\n    },\n    \"Launch Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"provision_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Launch Product\"\n    },\n    \"Launch Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Describe Provisioned Product Pass\"\n    },\n    \"Describe Provisioned Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"LaunchAVM\",\n        \"FunctionName\": \"describe_record\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Describe Provisioned Product\"\n    },\n    \"Describe Provisioned Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Is Product Provisioned Or Terminated successfully?\"\n    },\n    \"Is Product Provisioned Or Terminated successfully?\": {\n        \"Type\": \"Choice\",\n        \"Choices\": [\n          {\n            \"Variable\": \"$.ProvisioningStatus\",\n            \"StringEquals\": \"FAILED\",\n            \"Next\": \"Send Failed Pass\"\n          },\n          {\n            \"Variable\": \"$.ProvisioningStatus\",\n            \"StringEquals\": \"SUCCEEDED\",\n            \"Next\": \"Iterator Pass\"\n          }\n        ],\n        \"Default\": \"Wait For Product To Provision\"\n    },\n    \"Wait For Product To Provision\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"Describe Provisioned Product Pass\"\n    },\n    \"Send Success Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_success_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Success Response\"\n    },\n    \"Send Success Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Success\"\n    },\n    \"Success\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Send Failed Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_failure_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Failed Response\"\n    },\n    \"Send Failed Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Failed\"\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}"
                }
            }
        },
        "CheckAVMExistsStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "StateMachineName": "LandingZoneCheckAVMExistsStateMachine",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "StateMachineRole",
                        "Arn"
                    ]
                },
                "DefinitionString": {
                    "Fn::Sub": "{\n  \"Comment\": \"A state machine to check if the Provisioned product exists?\",\n  \"StartAt\": \"Metrics Pass\",\n  \"States\": {\n    \"Metrics Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_execution_data\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Metrics\"\n    },\n    \"Metrics\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Create or Delete?\"\n    },\n    \"Create or Delete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Create\",\n          \"Next\": \"Lookup Service Catalog Product Pass\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Update\",\n          \"Next\": \"Lookup Service Catalog Product Pass\"\n        },\n        {\n          \"Variable\": \"$.RequestType\",\n          \"StringEquals\": \"Delete\",\n          \"Next\": \"Send Success Pass\"\n        }\n      ]\n    },\n    \"Lookup Service Catalog Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CheckAVMExists\",\n        \"FunctionName\": \"lookup_product\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Lookup Service Catalog Product\"\n    },\n    \"Lookup Service Catalog Product\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Search Provisioned Product Pass\"\n    },\n    \"Search Provisioned Product Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"CheckAVMExists\",\n        \"FunctionName\": \"search_provisioned_products\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Search Provisioned Product\"\n    },\n    \"Search Provisioned Product\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"${StateMachineLambda.Arn}\",\n        \"Next\": \"Search Complete?\"\n    },\n    \"Search Complete?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.NextPageToken\",\n          \"StringEquals\": \"Complete\",\n          \"Next\": \"Does Provisioned Product Exist?\"\n        }\n      ],\n      \"Default\": \"Search Provisioned Product Account Wait\"\n    },\n    \"Search Provisioned Product Account Wait\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 1,\n      \"Next\": \"Search Provisioned Product Pass\"\n    },\n    \"Does Provisioned Product Exist?\": {\n        \"Type\": \"Choice\",\n        \"Choices\": [\n          {\n            \"Variable\": \"$.ProvisionedProductExists\",\n            \"BooleanEquals\": true,\n            \"Next\": \"Send Failed Pass\"\n          },\n          {\n            \"Variable\": \"$.ProvisionedProductExists\",\n            \"BooleanEquals\": false,\n            \"Next\": \"Send Success Pass\"\n          }\n        ]\n    },\n    \"Send Success Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_success_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Success Response\"\n    },\n    \"Send Success Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Success\"\n    },\n    \"Success\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Send Failed Pass\": {\n      \"Type\": \"Pass\",\n      \"Result\": {\n        \"ClassName\": \"GeneralFunctions\",\n        \"FunctionName\": \"send_failure_to_cfn\"\n      },\n      \"ResultPath\": \"$.params\",\n      \"Next\": \"Send Failed Response\"\n    },\n    \"Send Failed Response\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${StateMachineLambda.Arn}\",\n      \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,\n      \"Next\": \"Failed\"\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}"
                }
            }
        }
    },
    "Outputs": {
        "LandingZoneCodePipeline": {
            "Description": "AWS Landing Zone CodePipieline",
            "Value": {
                "Ref": "LandingZoneCodePipeline"
            }
        },
        "LandingZonePipelineS3Bucket": {
            "Description": "AWS Landing Zone Configruation Bucket",
            "Value": {
                "Ref": "LandingZonePipelineS3Bucket"
            }
        },
        "LandingZoneSolutionVersion": {
            "Description": "Version Number",
            "Value": "v1.0.2"
        }
    }
}
